#!/usr/bin/env ruby

require "fileutils"

# default values
BACKUP_DIR = "/Users/fabian/var/backups/dbdumps.git"
DATE_FORMAT = "%Y-%m-%d %H:%M %Z"
PERMISSIONS = [:owner]
USAGE = "Usage: 

  gitdbdump backup                     perform a backup of all databases of all installed RDBMS
  gitdbdump clean                      clean out old backups
  gitdbdump checkpoint <name>          save a manual checkpoint (which won't be deleted by clean)
  
"

# Functions: Logging
def error(msg)
  puts "error: #{msg}"
end

def printUsageAndExit
  puts USAGE
  exit(-1)
end

def installed_rdbms
  installed = []
  `which mysqldump`
  installed << "mysql" if $?.success?
  `which pg_dump`
  installed << "postgresql" if $?.success?

  installed  
end

def list_mysql
  `echo "show databases;" | mysql --column-names=false`
end

def dump_mysql(db,file)
	`mysqldump --comments=0 --extended-insert=false #{db} > "#{file}"`
end

def list_postgresql
	list = `echo "SELECT datname FROM pg_database;" | psql -t postgres -A`
	if $?.success?
	  list = list.split("\n")
	  list.delete("template0")
	  return list
  else
	  error("could not connect to postgres")
    return []
  end
end

def dump_postgresql(db,file)
	`pg_dump #{db} > "#{file}"`
end

def git_cmd(command)
  `GIT_DIR="#{File.join(BACKUP_DIR,".git")}" GIT_WORK_TREE="#{BACKUP_DIR}" git #{command}`  
end

def dump_all
  FileUtils.mkdir_p BACKUP_DIR
  git_cmd "init"
  FileUtils.rm_rf(Dir.glob(File.join(BACKUP_DIR,"*")), :secure => true)
  
  installed_rdbms.each do |rdbms|
    puts " * #{rdbms} databases:"
    dump_dir = File.join(BACKUP_DIR, rdbms)
    FileUtils.mkdir_p dump_dir
    send("list_#{rdbms}").each do |db|
      puts "  * dumping #{db}"
      send("dump_#{rdbms}",db,File.join(dump_dir,"#{db}.sql"))
    end
  end
end

def git_commit_regular
  git_cmd "add ."
  git_cmd "commit -a -m '#{Time.now.strftime(DATE_FORMAT)}'"
end

def git_commit_checkpoint(msg)
  git_cmd "add ."
  git_cmd "commit -a --allow-empty -m '#{Time.now.strftime(DATE_FORMAT)} - #{msg}'"
end

# MAIN

printUsageAndExit unless ARGV.length >= 1
case ARGV[0]
  when "backup"
    puts "running regular backup:\n\n"
    dump_all
    git_commit_regular
  
  when "checkpoint"
    printUsageAndExit unless ARGV.length == 2  
    name = ARGV[1]
    puts "creating checkpoint '#{name}':\n\n"
    dump_all
    git_commit_checkpoint name

  when "clean"
    puts "doing clean"
  
  else
    printUsageAndExit
end
