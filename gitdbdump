#!/usr/bin/env ruby

require "fileutils"

# default values
BACKUP_DIR = "/Users/fabian/var/backups/dbdumps.git"
PERMISSIONS = [:owner]
USAGE = "Usage: 

  gitdbdump backup                     perform a backup of all databases of all installed RDBMS
  gitdbdump clean                      clean out old backups
  gitdbdump checkpoint <name>          save a manual checkpoint (which won't be deleted by clean)
  
"

# Functions: Logging
def error(msg)
  puts "error: #{msg}"
end

def printUsageAndExit
  puts USAGE
  exit(-1)
end

# Functions: rdbms
def installed_rdbms
  installed = []
  `which mysqldump`
  installed << "mysql" if $?.success?
  `which pg_dump`
  installed << "postgresql" if $?.success?

  installed  
end

def list_mysql
  `echo "show databases;" | mysql --column-names=false`
end

def dump_mysql(db,file)
	`mysqldump --comments=0 --extended-insert=false #{db} > "#{file}"`
end

def list_postgresql
	list = `echo "SELECT datname FROM pg_database;" | psql -t postgres -A`
	if $?.success?
	  return list.split("\n")
  else
	  error("could not connect to postgres")
    return []
  end
end

def dump_postgresql(db,file)
	`pg_dump #{db} > "#{file}"`
end

# Functions: git
def git_cmd(command)
  `GIT_DIR="#{File.join(BACKUP_DIR,".git")}" GIT_WORK_TREE="#{BACKUP_DIR}" git #{command}`  
end



# MAIN

printUsageAndExit unless ARGV.length >= 1
case ARGV[0]
when "backup"
  puts "running backup:"
  
  FileUtils.mkdir_p BACKUP_DIR
  git_cmd "init"
  installed_rdbms.each do |rdbms|
    puts "* #{rdbms} databases:"
    dump_dir = File.join(BACKUP_DIR, rdbms)
    FileUtils.mkdir_p dump_dir
    send("list_#{rdbms}").each do |db|
      puts " * dumping #{db}"
      send("dump_#{rdbms}",db,File.join(dump_dir,"#{db}.sql"))
    end
  end
  
when "clean"
  puts "doing clean"
when "checkpoint"
  printUsageAndExit unless ARGV.length == 2
  
  puts "creating a checkpint"
else
  printUsageAndExit
end
