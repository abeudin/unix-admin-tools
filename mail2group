#!/usr/bin/env ruby

require "pathname"
ENV["BUNDLE_GEMFILE"] = File.join(Pathname.new(__FILE__).realpath.dirname, "Gemfile")
require "rubygems"
require "bundler/setup"
require 'uuidtools'
require 'mail'
require 'open4'
require "tmpdir"
require 'etc'

# Configuration / Constants
FAILED_MAIL_LOG = "/var/log/failed.mail"
PUBKEY_FILE = "pubkey.asc"
FORCE_CRYPT_GROUPS = "root admin"
FORCE_CRYPT_NOTIFICATION = "
Whoopsie daisy... 

The server is configured to enforce encryption
so you unfortunately can't read this email.

Please upload your gpg-key into your homedirectory,
call the file '#{PUBKEY_FILE}' and make sure it is
world-readable."

# Functions
def runCmd(cmd,input = nil)
	output = nil
	Open4::open4 cmd do |pid, stdin, stdout, stderr|
		stdin.puts input unless input.nil?
		stdin.close unless input.nil?

		output = stdout.read.strip
	end

	output
end

def L_ERR(msg)
	runCmd("logger -p mail.error -t mail2group", msg)
end

def L_DEBUG(msg)
	runCmd("logger -p mail.debug -t mail2group", msg)
end

def saveFailedMail(str)
	File.open(FAILED_MAIL_LOG,"a") { |f| f.write str }
end

def encryptBody(user,body)

	pubkey_file = File.join("/home/",user,PUBKEY_FILE)
	L_DEBUG "looking for file #{pubkey_file}"
	return nil unless File.readable?(pubkey_file)
	L_DEBUG "keyfile #{pubkey_file} found and readable"
	
	# Create temp gpg-dir
	tmpdir_gpg_path = Dir.mktmpdir("mailcrypt")

	# import key
	L_DEBUG "trying to import key into temporary keyring"
	output = runCmd "gpg --homedir #{tmpdir_gpg_path} --import #{pubkey_file} 2>&1"
	L_DEBUG output

	keyline = output.split("\n").grep(/gpg: key .*: public key .* imported/)
	if (keyline.length != 1)
		L_ERR "found #{keyline.size} keys for user '#{user}', expected exactly 1"	
		cryptedBody = nil
	else
		key = keyline[0].match(/gpg: key (.*):/)[1]
		L_DEBUG "imported key #{key} into temporary keyring"

		# encrypt
		cryptedBody = runCmd "gpg --homedir #{tmpdir_gpg_path} --encrypt -r #{key} -a --trust-model=always 2>&1", body
		L_DEBUG cryptedBody

	end

	# Delete temp gpg-dir
	FileUtils.rm_rf tmpdir_gpg_path

	cryptedBody	
end

def createCryptedMultipartMail(cryptedBody)
	boundary = UUIDTools::UUID.random_create
	mail = Mail.new("Content-Type: multipart/encrypted; boundary=\"#{boundary}\"; protocol=\"application/pgp-encrypted\";")

	# Body
	mail.body = "

--#{boundary}
Content-Type: application/pgp-encrypted

Version: 1

--#{boundary}
Content-Type: application/octet-stream

#{cryptedBody}

--#{boundary}--

"

	mail
end

def getGroupMembers(group_name)
  group_name = "admin" if group_name == "root"

  # recipients in group
  begin
  	group = Etc.getgrnam(group_name)
  	recipients = group.mem

  	# recipients which have target-group as their homegroup
  	Etc.passwd do |entry|
  	  recipients << entry.name if entry.gid == group.gid
  	end

  	recipients = recipients.uniq
  rescue ArgumentError
	recipients = nil
  end

  # close /etc files
  Etc.endgrent()
  Etc.endpwent()
  
  recipients
end





########################
#
# MAIN 
#
#
########################

input = ARGF.read
mail = Mail.new(input)

# we need the content_type later
content_type = mail.header['content_type']

# get recipients
group_name = mail['delivered_to'].value.gsub(/@.*/,"")
recipients = getGroupMembers(group_name)
if recipients.nil?
  	L_ERR "#{mail.message_id}: error getting group-members for groupname '#{group_name}'"
	saveFailedMail(input)
	exit(1)
end

recipients.each do |user|

	# add the content-type to the body before encryption
	bodyForCrypt = ""
	if !content_type.nil?
	    bodyForCrypt = "Content-Type: #{content_type.value}\n"
	end
	bodyForCrypt = bodyForCrypt + mail.body.to_s
	cryptedBody = encryptBody(user, bodyForCrypt)
	if !cryptedBody.nil?

		# send encrypted mail
		newMail = createCryptedMultipartMail(cryptedBody)
		newMail.from = mail.from
		newMail.subject = mail.subject
		newMail.bcc = user
		newMail.reply_to = mail.to 
	
		# send
		newMail.delivery_method :sendmail
		newMail.deliver!

	else 
	
		# send unencrypted mail
		newMail = Mail.new()
		newMail.from = mail.from
		newMail.subject = mail.subject
		newMail.bcc = user
		newMail.reply_to = mail.to 

		if FORCE_CRYPT_GROUPS.split.include? (group_name)
			newMail.body = FORCE_CRYPT_NOTIFICATION
		else
			newMail.header['content-type'] = content_type.value unless content_type.nil?
			newMail.body = mail.body.to_s
		end

		# send
		newMail.delivery_method :sendmail
		newMail.deliver!
	
	end
end

